{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","item","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAKN,EAAMI,QAAQG,YCFdC,G,MAAW,SAAAR,GACtB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLhBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCPG,E,kDApCX,aAAe,IAAD,8BACV,gBAQJH,aAAe,SAAAI,GACX,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,qDAad,WAAqB,IAAD,OAChBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAK,EAAKT,SAAS,CAAET,SAAUkB,S,oBAE9C,WACI,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAAC,GAAI,OACzCA,EAAKzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAEjD,OACI,sBAAK/B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAee,KAAKf,eAExB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BlBK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4d15ece9.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}/?set=set2&size=12*120`} />\n        <h1>{ props.monster.name }</h1>\n        <p>{ props.monster.email }</p>\n    </div>\n)","import React from \"react\";\n\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = props => {\n  return <div className=\"card-list\">\n      {props.monsters.map(monster => (\n          <Card key={monster.id} monster={monster} />\n      ))}</div>;\n};\n","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input \n            className=\"search\"\n            type=\"search\" \n            placeholder={placeholder} \n            onChange={handleChange} \n        />\n    )\n}","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './/components/search-box/search-box.component';\n\nclass App extends Component  {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    handleChange = e => {\n        this.setState({ searchField: e.target.value })\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users =>  this.setState({ monsters: users }))\n    }\n    render() {\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter(item => \n            item.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox\n                    placeholder=\"Search monsters\"\n                    handleChange={ this.handleChange }\n                />\n                <CardList monsters={filteredMonsters} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}